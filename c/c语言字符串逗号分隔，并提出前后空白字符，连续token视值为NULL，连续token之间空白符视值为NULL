#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_TOKENS 100

// 函数原型声明
void addToken(char **tokens, int *token_count, char *start, char *end);

int main() {
    char input[] = ", one,  , two ,, , three   , four ,";
    char *tokens[MAX_TOKENS] = {0};
    int token_count = 0;
    
    char *start_ptr = input;          // 当前 token 的起始位置
    char *end_ptr;                    // 当前 token 的结束位置
    
    // 遍历字符串直到结尾或者达到最大 token 数量限制
    while (*start_ptr && token_count < MAX_TOKENS) {
        end_ptr = strchr(start_ptr, ',');    // 在当前指针位置查找下一个逗号
        
        if (end_ptr == NULL) {
            addToken(tokens, &token_count, start_ptr, input + strlen(input));
            break;  // 如果没有更多逗号，则处理最后一个 token 并退出循环
        } else {
            *end_ptr = '\0';  // 用 null 字符暂时替换逗号以便提取当前 token
            addToken(tokens, &token_count, start_ptr, end_ptr);
            *end_ptr = ',';  // 恢复逗号字符
            if (*(end_ptr + 1) == '\0') {  // 检查是否是最后一个字符
                tokens[token_count++] = NULL;
                break;
            }
            start_ptr = end_ptr + 1;  // 移动 start_ptr 到下一个字符，跳过当前这个逗号
        }
    }

    // 打印所有 tokens
    for (int i = 0; i < token_count; i++) {
        printf("Token[%d]: '%s'\n", i, tokens[i] ? tokens[i] : "NULL");
    }

    return 0;
}

void addToken(char **tokens, int *token_count, char *start, char *end) {
    // 去除前后的空白字符
    while (isspace((unsigned char)*start) && start < end) start++;
    while ((end > start) && isspace((unsigned char)*(end - 1))) end--;

    if (start == end) {
        // 如果剩下的都是空白字符，则视为 NULL
        tokens[(*token_count)++] = NULL;
    } else {
        *end = '\0';  // 在 end 处加上字符串终止符
        tokens[(*token_count)++] = strdup(start);  // 使用 strdup 来复制 token
    }
}
